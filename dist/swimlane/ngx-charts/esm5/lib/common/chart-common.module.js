import { __decorate, __read, __spread } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChartComponent } from './charts/chart.component';
import { ScaleLegendComponent, LegendComponent, LegendEntryComponent, AdvancedLegendComponent } from './legend';
import { BaseChartComponent } from './base-chart.component';
import { AxesModule } from './axes/axes.module';
import { TooltipModule } from './tooltip';
import { CircleSeriesComponent } from './circle-series.component';
import { CircleComponent } from './circle.component';
import { GridPanelComponent } from './grid-panel.component';
import { GridPanelSeriesComponent } from './grid-panel-series.component';
import { SvgLinearGradientComponent } from './svg-linear-gradient.component';
import { SvgRadialGradientComponent } from './svg-radial-gradient.component';
import { Timeline } from './timeline';
import { AreaComponent } from './area.component';
import { TooltipArea } from './tooltip-area.component';
import { CountUpDirective } from './count';
var COMPONENTS = [
    AreaComponent,
    BaseChartComponent,
    CountUpDirective,
    TooltipArea,
    ChartComponent,
    LegendComponent,
    LegendEntryComponent,
    ScaleLegendComponent,
    CircleComponent,
    CircleSeriesComponent,
    GridPanelComponent,
    GridPanelSeriesComponent,
    SvgLinearGradientComponent,
    SvgRadialGradientComponent,
    Timeline,
    AdvancedLegendComponent
];
var ChartCommonModule = /** @class */ (function () {
    function ChartCommonModule() {
    }
    ChartCommonModule = __decorate([
        NgModule({
            imports: [CommonModule, AxesModule, TooltipModule],
            declarations: __spread(COMPONENTS),
            exports: __spread([CommonModule, AxesModule, TooltipModule], COMPONENTS)
        })
    ], ChartCommonModule);
    return ChartCommonModule;
}());
export { ChartCommonModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bzd2ltbGFuZS9uZ3gtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9jaGFydC1jb21tb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNoSCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUzQyxJQUFNLFVBQVUsR0FBRztJQUNqQixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsY0FBYztJQUNkLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixxQkFBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLHdCQUF3QjtJQUN4QiwwQkFBMEI7SUFDMUIsMEJBQTBCO0lBQzFCLFFBQVE7SUFDUix1QkFBdUI7Q0FDeEIsQ0FBQztBQU9GO0lBQUE7SUFBZ0MsQ0FBQztJQUFwQixpQkFBaUI7UUFMN0IsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUM7WUFDbEQsWUFBWSxXQUFNLFVBQVUsQ0FBQztZQUM3QixPQUFPLFlBQUcsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLEdBQUssVUFBVSxDQUFDO1NBQ2xFLENBQUM7T0FDVyxpQkFBaUIsQ0FBRztJQUFELHdCQUFDO0NBQUEsQUFBakMsSUFBaUM7U0FBcEIsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IENoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9jaGFydHMvY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IFNjYWxlTGVnZW5kQ29tcG9uZW50LCBMZWdlbmRDb21wb25lbnQsIExlZ2VuZEVudHJ5Q29tcG9uZW50LCBBZHZhbmNlZExlZ2VuZENvbXBvbmVudCB9IGZyb20gJy4vbGVnZW5kJztcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXhlc01vZHVsZSB9IGZyb20gJy4vYXhlcy9heGVzLm1vZHVsZSc7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnLi90b29sdGlwJztcbmltcG9ydCB7IENpcmNsZVNlcmllc0NvbXBvbmVudCB9IGZyb20gJy4vY2lyY2xlLXNlcmllcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2lyY2xlQ29tcG9uZW50IH0gZnJvbSAnLi9jaXJjbGUuY29tcG9uZW50JztcbmltcG9ydCB7IEdyaWRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1wYW5lbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JpZFBhbmVsU2VyaWVzQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLXBhbmVsLXNlcmllcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ZnTGluZWFyR3JhZGllbnRDb21wb25lbnQgfSBmcm9tICcuL3N2Zy1saW5lYXItZ3JhZGllbnQuY29tcG9uZW50JztcbmltcG9ydCB7IFN2Z1JhZGlhbEdyYWRpZW50Q29tcG9uZW50IH0gZnJvbSAnLi9zdmctcmFkaWFsLWdyYWRpZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaW1lbGluZSB9IGZyb20gJy4vdGltZWxpbmUnO1xuaW1wb3J0IHsgQXJlYUNvbXBvbmVudCB9IGZyb20gJy4vYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVG9vbHRpcEFyZWEgfSBmcm9tICcuL3Rvb2x0aXAtYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ291bnRVcERpcmVjdGl2ZSB9IGZyb20gJy4vY291bnQnO1xuXG5jb25zdCBDT01QT05FTlRTID0gW1xuICBBcmVhQ29tcG9uZW50LFxuICBCYXNlQ2hhcnRDb21wb25lbnQsXG4gIENvdW50VXBEaXJlY3RpdmUsXG4gIFRvb2x0aXBBcmVhLFxuICBDaGFydENvbXBvbmVudCxcbiAgTGVnZW5kQ29tcG9uZW50LFxuICBMZWdlbmRFbnRyeUNvbXBvbmVudCxcbiAgU2NhbGVMZWdlbmRDb21wb25lbnQsXG4gIENpcmNsZUNvbXBvbmVudCxcbiAgQ2lyY2xlU2VyaWVzQ29tcG9uZW50LFxuICBHcmlkUGFuZWxDb21wb25lbnQsXG4gIEdyaWRQYW5lbFNlcmllc0NvbXBvbmVudCxcbiAgU3ZnTGluZWFyR3JhZGllbnRDb21wb25lbnQsXG4gIFN2Z1JhZGlhbEdyYWRpZW50Q29tcG9uZW50LFxuICBUaW1lbGluZSxcbiAgQWR2YW5jZWRMZWdlbmRDb21wb25lbnRcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEF4ZXNNb2R1bGUsIFRvb2x0aXBNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFsuLi5DT01QT05FTlRTXSxcbiAgZXhwb3J0czogW0NvbW1vbk1vZHVsZSwgQXhlc01vZHVsZSwgVG9vbHRpcE1vZHVsZSwgLi4uQ09NUE9ORU5UU11cbn0pXG5leHBvcnQgY2xhc3MgQ2hhcnRDb21tb25Nb2R1bGUge31cbiJdfQ==