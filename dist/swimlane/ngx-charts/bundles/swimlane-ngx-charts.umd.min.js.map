{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-charts/lib/common/tooltip/position/placement.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/position/position.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/style.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/alignment.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/show.type.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/injection.service.ts","ng://@swimlane/ngx-charts/lib/utils/throttle.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/injection-registery.service.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.ts","ng://@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.ts","ng://@swimlane/ngx-charts/lib/common/charts/chart.component.ts","ng://@swimlane/ngx-charts/lib/common/label.helper.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/scale-legend.component.ts","ng://@swimlane/ngx-charts/lib/common/legend/legend-entry.component.ts","ng://@swimlane/ngx-charts/lib/common/trim-label.helper.ts","ng://@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.ts","ng://@swimlane/ngx-charts/lib/utils/id.ts","ng://@swimlane/ngx-charts/lib/utils/color-sets.ts","ng://@swimlane/ngx-charts/lib/utils/sort.ts","ng://@swimlane/ngx-charts/lib/utils/color-utils.ts","ng://@swimlane/ngx-charts/lib/utils/visibility-observer.ts","ng://@swimlane/ngx-charts/lib/utils/types.ts","ng://@swimlane/ngx-charts/lib/common/base-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axis-label.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/ticks.helper.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/x-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/shape.helper.ts","ng://@swimlane/ngx-charts/lib/events.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/y-axis.component.ts","ng://@swimlane/ngx-charts/lib/common/axes/axes.module.ts","ng://@swimlane/ngx-charts/lib/common/circle-series.component.ts","ng://@swimlane/ngx-charts/lib/common/circle.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-panel-series.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.ts","ng://@swimlane/ngx-charts/lib/common/timeline/timeline.component.ts","ng://@swimlane/ngx-charts/lib/common/area.component.ts","ng://@swimlane/ngx-charts/lib/common/tooltip-area.component.ts","ng://@swimlane/ngx-charts/lib/common/count/count.helper.ts","ng://@swimlane/ngx-charts/lib/common/count/count.directive.ts","ng://@swimlane/ngx-charts/lib/common/chart-common.module.ts","ng://@swimlane/ngx-charts/lib/common/view-dimensions.helper.ts","ng://@swimlane/ngx-charts/lib/common/color.helper.ts","ng://@swimlane/ngx-charts/lib/common/domain.helper.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-series.component.ts","ng://@swimlane/ngx-charts/lib/area-chart/area-chart.module.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-label.component.ts","ng://@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.utils.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.ts","ng://@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.component.ts","ng://@swimlane/ngx-charts/lib/heat-map/heat-map.module.ts","ng://@swimlane/ngx-charts/lib/line-chart/line.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-series.component.ts","ng://@swimlane/ngx-charts/lib/line-chart/line-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-label.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.ts","ng://@swimlane/ngx-charts/lib/common/grid-layout.helper.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-series.component.ts","ng://@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.ts","ng://@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.ts","ng://@swimlane/ngx-charts/lib/number-card/card.component.ts","ng://@swimlane/ngx-charts/lib/number-card/card-series.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.component.ts","ng://@swimlane/ngx-charts/lib/number-card/number-card.module.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.component.ts","ng://@swimlane/ngx-charts/lib/tree-map/tree-map.module.ts","ng://@swimlane/ngx-charts/lib/gauge/linear-gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-arc.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge-axis.component.ts","ng://@swimlane/ngx-charts/lib/gauge/gauge.module.ts","ng://@swimlane/ngx-charts/lib/ngx-charts.module.ts","ng://@swimlane/ngx-charts/lib/polyfills.ts","ng://@swimlane/ngx-charts/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","PlacementTypes","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","StyleTypes","AlignmentTypes","ShowTypes","PositionHelper","calculateVerticalAlignment","result","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","InjectionService_1","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","componentRef","hostView","rootNodes","location","nativeElement","getRootViewContainerNode","projectComponentBindings","component","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","attach","ApplicationRef","ComponentFactoryResolver","Injector","Injectable","throttle","func","wait","options","context","args","timeout","previous","later","leading","Date","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","descriptor","configurable","enumerable","get","TooltipContentComponent","element","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","Component","selector","template","encapsulation","ViewEncapsulation","None","TooltipService","injectionService","_super","InjectionRegisteryService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","has","set","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","EventEmitter","hide","focus","mouseover","ngOnDestroy","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","createBoundOptions","addHideListeners","emit","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","Output","Directive","TooltipModule","NgModule","declarations","providers","exports","imports","CommonModule","entryComponents","ChartComponent","vcr","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","&","'","`","\"","<",">","LegendComponent","cd","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","markForCheck","getLegendEntries","items","formattedLabel","findIndex","color","this_1","colors","getColor","_b","data","_c","isActive","entry","activeEntries","find","name","activate","item","deactivate","trackBy","index","ChangeDetectorRef","ScaleLegendComponent","sanitizer","gradientValues","gradientString","range","domain","direction","gradient","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","round","join","DomSanitizer","LegendEntryComponent","select","toggle","isNotANumber","isNaN","trimLabel","max","trim","slice","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","map","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","cache","id","newId","random","pow","toString","colorSets","selectable","group","sortLinear","property","sort","a","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","aDate","getTime","bDate","invertColor","d3_color.rgb","g","shadeRGBColor","percent","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","isDate","BaseChartComponent","chartElement","scheme","schemeType","bindWindowResizeEvent","visibilityObserver","subscribe","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data_1","data_1_1","copy","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","tl","tr","bl","br","retval","root","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","AxesModule","CircleSeriesComponent","barVisible","ngOnInit","gradientId","gradientFill","circles","getCircles","circle","getActiveCircle","visibleValue","seriesName","cx","game","tooltipLabel","xScale","Number","cy","yScale","d1","classNames","radius","gradientStops","getGradientStops","filter","getTooltipText","getTooltipMinMaxText","onClick","activateCircle","deactivateCircle","CircleComponent","isArray","GridPanelComponent","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","values","_e","_f","includes","v","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","attr","AreaComponent","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","path","global","MouseEvent","createMouseEvent","bubbles","cancelable","event_1","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","groupName","val","d0","toFixed","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","abs","getToolTipText","tooltipItem","static","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","finished","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","D0Types","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","BarChartModule","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","legendAverages","hasRange","averages","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","LineChartModule","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","navigator","userAgent","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","PolarChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","NumberCardModule","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","TreeMapModule","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","GaugeModule","NgxChartsModule","SVGElement","HTMLDivElement","fieldType","groupByType","timeFormat","formatter"],"mappings":"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UACA,YAGJ,CACEZ,KAAM,OACNuD,YAAY,EACZC,MAAO,aACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,QACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,QACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,SACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,UACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,QACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,SACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,QACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEZ,KAAM,cACNuD,YAAY,EACZC,MAAO,UACP5C,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,sBC5PU6C,EAAW/D,EAAMgE,EAAU7C,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCnB,EAAKiE,MAAK,SAACC,EAAG9Y,GACnB,MAAkB,QAAd+V,EACK+C,EAAEF,GAAY5Y,EAAE4Y,GAEhB5Y,EAAE4Y,GAAYE,EAAEF,MAK7B,SAAgBG,EAAanE,EAAMgE,EAAU7C,EAAmBD,GAC9D,YAD2C,IAAAC,IAAAA,EAAA,O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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(componentRef: any): HTMLElement {\n    if (componentRef.hostView && (componentRef.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return componentRef.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(componentRef): HTMLElement {\n    return this.getComponentRootNode(componentRef);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function() {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate ? 0 : this.tooltipShowTimeout;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ViewContainerRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [averages]=\"legendOptions.averages\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  constructor(private vcr: ViewContainerRef, private tooltipService: TooltipService) {\n    // this.tooltipService.injectionService.setRootViewContainer(this.vcr);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n        <span class=\"legend-title-text avg\">Avg</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; let i = index; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [average]=\"averages[i]\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n  @Input() averages: any[];\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text name\">\n        {{ trimmedLabel }}\n      </span>\n      <span class=\"legend-label-text average\" *ngIf=\"!isNotANumber(average?.value)\">\n        {{average?.value | number:'1.0-2'}}\n      </span>\n    </span>\n  `,\n  styles: [\n    '.legend-label-text { padding-right: 5px; }',\n    '.name { width: 65%; }',\n    '.average { width: 20%; }'\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n  @Input() average: any;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n\n  isNotANumber(value) {\n    return isNaN(value);\n  }\n\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import { Output, EventEmitter, NgZone, Directive } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive()\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: any, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { VisibilityObserver } from '../utils';\n\n@Component({\n  selector: 'base-chart',\n  template: `\n    <div></div>\n  `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function(d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function(d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 8; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines && !isNotANumber(refLine.value)\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.fill]=\"refLine.color\"\n          [attr.stroke]=\"refLine.color\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.fill]=\"refLine.color\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.fill]=\"refLine.color\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\">\n            {{refLine.value | number:'1.1-2'}}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function(d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function(d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function(tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function(tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function(tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function(tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n  isNotANumber(value) {\n    return isNaN(value);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n    this.circle = this.circles.find(c => {\n      return c.opacity !== 0;\n    });\n    // this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series.map((d, i) => {\n      const value = d.value;\n      const label = d.name;\n      const game = d.game;\n      const tooltipLabel = formatLabel(label);\n\n      let cx;\n      if (this.scaleType === 'time') {\n        cx = this.xScale(label);\n      } else if (this.scaleType === 'linear') {\n        cx = this.xScale(Number(label));\n      } else {\n        cx = this.xScale(label);\n      }\n\n      const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n      const radius = 5;\n      const height = this.yScale.range()[0] - cy;\n\n      let opacity = 0;\n      if (label && this.visibleValue && label.toString() === this.visibleValue.toString()) {\n        opacity = 1;\n      }\n\n      let color;\n      if (this.colors.scaleType === 'linear') {\n        if (this.type === 'standard') {\n          color = this.colors.getColor(value);\n        } else {\n          color = this.colors.getColor(d.d1);\n        }\n      } else {\n        color = this.colors.getColor(seriesName);\n      }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label,\n      game\n    });\n\n      return {\n        classNames: [`circle-data-${i}`],\n        value,\n        label,\n        data,\n        cx,\n        cy,\n        radius,\n        height,\n        tooltipLabel,\n        color,\n        opacity,\n        seriesName,\n        gradientStops: this.getGradientStops(color),\n        min: d.min,\n        max: d.max\n      };\n    }).filter((circle) => circle !== undefined);\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} â¢ ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += 'â¥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += 'â¤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select, event as d3event } from 'd3-selection';\n\nimport { id } from '../../utils';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime()\n        .range([0, this.dims.width])\n        .domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear()\n        .range([0, this.dims.width])\n        .domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint()\n        .range([0, this.dims.width])\n        .padding(0.1)\n        .domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', () => {\n        const selection = d3event.selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element)\n      .select('.brush')\n      .call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element)\n      .select('.brush')\n      .call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += 'â¥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += 'â¤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: `\n    {{ value }}\n  `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { ScaleLegendComponent, LegendComponent, LegendEntryComponent, AdvancedLegendComponent } from './legend';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { Timeline } from './timeline';\nimport { AreaComponent } from './area.component';\nimport { TooltipArea } from './tooltip-area.component';\nimport { CountUpDirective } from './count';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile()\n        .range(scheme.domain)\n        .domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal()\n        .range(scheme.domain)\n        .domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear()\n        .domain(points)\n        .range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear()\n        .domain(this.domain)\n        .range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear()\n      .domain(this.domain)\n      .range([0, 1]);\n\n    const colorValueScale = scaleBand()\n      .domain(this.colorDomain)\n      .range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node\n        .transition()\n        .duration(500)\n        .attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, height])\n      .paddingInner(spacing)\n      .domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand()\n      .range([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand()\n      .rangeRound([0, width])\n      .paddingInner(spacing)\n      .domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear()\n      .range([this.dims.height, 0])\n      .domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} â¢ ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime()\n      .range(range)\n      .domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear()\n      .range(range)\n      .domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint()\n      .range([range[0], range[1]])\n      .domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear()\n      .range(range)\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} â¢ ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node\n      .transition()\n      .duration(750)\n      .attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} â¢ ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .domain(this.xDomain)\n      .paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand()\n      .rangeRound([this.dims.height, 0])\n      .domain(this.yDomain)\n      .paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() legendAverages: any[] = [];\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime()\n        .range([0, width])\n        .domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear()\n        .range([0, width])\n        .domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint()\n        .range([0, width])\n        .padding(0.1)\n        .domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([height, 0])\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition,\n      averages: this.legendAverages\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime()\n          .range([0, width])\n          .domain(domain);\n      case 'linear':\n        const scale = scaleLinear()\n          .range([0, width])\n          .domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear()\n      .range([0, height])\n      .domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} â¢ ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n\n  constructor() {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc()\n      .innerRadius(startRadius)\n      .outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  get styleTransform(): string {\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n  }\n\n  get attrTransform(): string {\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n  }\n\n  get textTransition(): string {\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc()\n      .innerRadius(this.innerRadius)\n      .outerRadius(outerRadius)\n      .cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function(d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function(t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/';\nimport { LineChartModule } from '../line-chart/';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { count, decimalChecker } from '../common/count';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        this.scaleText();\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node\n      .attr('opacity', 0)\n      .attr('x', this.x)\n      .attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText('value');\n      this.scaleText('units');\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    setTimeout(() => this.scaleText('value'), 50);\n    setTimeout(() => this.scaleText('units'), 50);\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear()\n      .range([0, this.dims.width])\n      .domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear()\n      .range([0, this.angleSpan])\n      .nice()\n      .domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function(label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}